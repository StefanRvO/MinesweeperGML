<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>t=0;
pointX=0;
pointY=0;
randomize();
global.boardx = global.felter_vandret;
global.boardy = global.felter_lodret;
bombs = global.numb_bombs;

t=1;
//when t is set to 1, we start drawing (in control draw event)

global.flagsPlaced=0;
global.fieldsOpen=0;
restarts=0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.fieldsize=20;

//controls size of fileds
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="54">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (t==0) //prevent fault if board isn't generated yet.
//if we got time, we should implent the possabillity to place flags before the board is generated
{
    pointX=floor(mouse_x/global.fieldsize*1.05); //hak to correct a bug somewhere
    pointY=floor(mouse_y/global.fieldsize);
    if (pointX&gt;global.boardx-1 || pointY&gt;global.boardy-1)
        exit;
    //show_message(string(pointX)+" , "+string(pointY));
    //place or remove flag
    ds_grid_create(global.boardx,global.boardy);
            for(i=0;i&lt;global.boardx;i+=1)
            {
                for(j=0;j&lt;global.boardy;j+=1)
                {   
                ds_grid_add(0,i,j,global.bombarray[i,j]);
                }
            }
    clickField(pointX,pointY,1);
    countStats();
    for (i=0;i&lt;global.boardx;i+=1)
    {
        for(j=0;j&lt;global.boardy;j+=1)
        {
            global.bombarray[i,j]=ds_grid_get(0,i,j);
        }
    }
    ds_grid_destroy(0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>pointX=floor(mouse_x/global.fieldsize*1.05); //hack to correct a bug somewhere
pointY=floor(mouse_y/global.fieldsize);
if (pointX&gt;global.boardx-1 || pointY&gt;global.boardy-1)
    exit;
if (t)
{
    generateBombPlacement(global.boardx,global.boardy,bombs,pointX,pointY);
    generateBoardNumbers();
    for (i=0;i&lt;global.boardx;i+=1)
    {
        for(j=0;j&lt;global.boardy;j+=1)
        {
            global.bombarray[i,j]=ds_grid_get(0,i,j);
        }
    }
    ds_grid_destroy(0);
    
    for (i=0;i&lt;global.boardx;i+=1)
    {
        for(j=0;j&lt;global.boardy;j+=1)
        {
            instance_create(i*global.fieldsize,j*global.fieldsize,obj_field);
        }
    }
    //don't draw the board anymore. this is now handled by obj_field
    t=0;
}
//show_message(string(pointX)+" , "+string(pointY));
ds_grid_create(global.boardx,global.boardy);
        for(i=0;i&lt;global.boardx;i+=1)
        {
            for(j=0;j&lt;global.boardy;j+=1)
            {   
            ds_grid_add(0,i,j,global.bombarray[i,j]);
            }
        }
        //reset board if we hit a bomb
if(clickField(pointX,pointY,0)==29)
{
    restarts+=1;
    show_message("You hit a bomb, board has been reset");
    t=1;
}

countStats();
for (i=0;i&lt;global.boardx;i+=1)
{
    for(j=0;j&lt;global.boardy;j+=1)
    {
        global.bombarray[i,j]=ds_grid_get(0,i,j);
    }
}
ds_grid_destroy(0);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*open=0;
flags=;0
totalcells=global.boardx*global.boardy;
for (i=0;i&lt;global.boardx;i+=1)
{
    for(j=0;j&lt;global.boardy;j+=1)
    {
        if(global.bombarray[i,j]&gt;=0 and global.bombarray&lt;=8)
        {
            open+=1;
        }
        else if (global.bombarray[i,j]==19 || global.bombarray[i,j]==29)
        {
            flags+=1;
        }
    }
}
if ((open+flags)==totalcells)
{
    show_message("You win.. I think you cheated...");
}

show_message(string(totalcells)+"  "+string(open+flags));
            
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw initial board with no open fields
//stop drawing after player has pressed a field
if(t) {
for(i=0;i&lt;global.boardx;i+=1) {
    for (j=0;j&lt;global.boardy;j+=1) {
        draw_sprite(spr_closed,0,global.fieldsize*i,global.fieldsize*j);
        }
    }
}
draw_text(global.fieldsize*global.boardx+40, global.fieldsize*global.boardy+40,"You: open fields: "+string(global.fieldsOpen)+"/"+string(global.boardy*global.boardx-bombs)+"  found bombs: "+string(global.flagsPlaced)+"/"+string(bombs)+ " Restarts: "+string(restarts));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>game_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="40">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>t=1;
restarts+=1;
/*//regenerate board, for debuging. Generate board as if player pressed on field 1,1
generateBombPlacement(global.boardx,global.boardy,bombs,0,0);
generateBoardNumbers();
for (i=0;i&lt;global.boardx;i+=1)
{
    for(j=0;j&lt;global.boardy;j+=1)
    {
        global.bombarray[i,j]=ds_grid_get(0,i,j);
    }
}
ds_grid_destroy(0);*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="38">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
pointX=get_integer("feltX, tryk",5)-1;
pointY=get_integer("feltY,tryk",5)-1;
ds_grid_create(global.boardx,global.boardy);
        for(i=0;i&lt;global.boardx;i+=1)
        {
            for(j=0;j&lt;global.boardy;j+=1)
            {   
            ds_grid_add(0,i,j,global.bombarray[i,j]);
            }
        }
hit=clickField(pointX,pointY,0);

if(hit==29)
{
    show_message("you have hit a bomb... damn you suck at this..");
}
for (i=0;i&lt;global.boardx;i+=1)
{
    for(j=0;j&lt;global.boardy;j+=1)
    {
        global.bombarray[i,j]=ds_grid_get(0,i,j);
    }
}
ds_grid_destroy(0);


//used for testing only
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_goto(Singleplayer_menu);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_goto(Singleplayer_menu);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsShapePoints/>
</object>
